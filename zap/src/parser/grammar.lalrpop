use std::collections::HashSet;
use std::str::FromStr;

use crate::Error;
use crate::util::Range;
use crate::parser::*;
use crate::parser::working_ast::*;

use lalrpop_util::ParseError;

grammar(ref_decl: &mut HashSet<String>, ref_used: &mut HashSet<String>, ev_names: &mut HashSet<String>);

extern {
	type Error = Error;
}

match {
    r"\s*" => { },
    r"(--\[\[[^(\]\])]*\]\])|(--.*)" => { },
} else {
	_
}

pub File: File = <opts:Opt*> <decls:Decl*> => {
	let mut ty_decls = Vec::new();
	let mut ev_decls = Vec::new();

	for decl in decls {
		match decl {
			Decl::Ty(decl) => ty_decls.push(decl),
			Decl::Ev(decl) => ev_decls.push(decl),
		}
	}

	let mut casing = Casing::Pascal;
	let mut write_checks = false;

	let mut server_output = PathBuf::from("network/server.luau");
	let mut client_output = PathBuf::from("network/client.luau");

	for opt in opts {
		match opt {
			Opt::Casing(v) => casing = v,
			Opt::WriteChecks(v) => write_checks = v,
			Opt::ServerOutput(v) => server_output = v, 
			Opt::ClientOutput(v) => client_output = v, 
		}
	}

	File { ty_decls, ev_decls, casing, write_checks, server_output, client_output }
};

Opt: Opt = {
	"opt" "casing" "=" "camelCase" => Opt::Casing(Casing::Camel),
	"opt" "casing" "=" "snake_case" => Opt::Casing(Casing::Snake),
	"opt" "casing" "=" "PascalCase" => Opt::Casing(Casing::Pascal),

	"opt" "write_checks" "=" "true" => Opt::WriteChecks(true),
	"opt" "write_checks" "=" "false" => Opt::WriteChecks(false),

	"opt" "output_server" "=" <r"[^\s]+\.luau?"> => Opt::ServerOutput(PathBuf::from(<>)),
	"opt" "output_client" "=" <r"[^\s]+\.luau?"> => Opt::ClientOutput(PathBuf::from(<>)),
}

Decl: Decl = {
	<decl:TyDecl> => Decl::Ty(decl),
	<decl:EvDecl> => Decl::Ev(decl),
}

EvDecl: EvDecl = "event" <name:Word> "=" "{" <fields:Comma<EvField>> "}" =>? {
	if !ev_names.insert(name.clone()) {
		return Err(ParseError::User {
			error: Error::DuplicateEvent(name),
		})
	}

	let mut from = EvSource::Server;
	let mut evty = EvType::Reliable;
	let mut call = EvCall::SingleSync;
	let mut data = Ty::Bool;

	for field in fields {
		match field {
			EvField::From(v) => from = v,
			EvField::Type(v) => evty = v,
			EvField::Call(v) => call = v,
			EvField::Data(v) => data = v,
		}
	}

	Ok(EvDecl {
		name,
		from,
		evty,
		call,
		data,
	})
};

EvField: EvField = {
	"from" ":" "Server" => EvField::From(EvSource::Server),
	"from" ":" "Client" => EvField::From(EvSource::Client),

	"type" ":" "Reliable" => EvField::Type(EvType::Reliable),
	"type" ":" "Unreliable" => EvField::Type(EvType::Unreliable),

	"data" ":" <ty:Ty> => EvField::Data(ty),

	"call" ":" "SingleSync" => EvField::Call(EvCall::SingleSync),
	"call" ":" "SingleAsync" => EvField::Call(EvCall::SingleAsync),
	"call" ":" "ManySync" => EvField::Call(EvCall::ManySync),
	"call" ":" "ManyAsync" => EvField::Call(EvCall::ManyAsync),
}

TyDecl: TyDecl = "type" <name:Word> "=" <ty:Ty> =>? {
	if !ref_decl.insert(name.clone()) {
		Err(ParseError::User {
			error: Error::DuplicateType(name),
		})
	} else {
		Ok(TyDecl { name, ty })
	}
};

Ty: Ty = {
	"bool" => Ty::Bool,

	"f32" <r:("(" <Range> ")")?> => Ty::F32(r.unwrap_or_default().cast()),
	"f64" <r:("(" <Range> ")")?> => Ty::F64(r.unwrap_or_default().cast()),

	"i8" <r:("(" <Range> ")")?> => Ty::I8(r.unwrap_or_default().cast()),
	"i16" <r:("(" <Range> ")")?> => Ty::I16(r.unwrap_or_default().cast()),
	"i32" <r:("(" <Range> ")")?> => Ty::I32(r.unwrap_or_default().cast()),

	"u8" <r:("(" <Range> ")")?> => Ty::U8(r.unwrap_or_default().cast()),
	"u16" <r:("(" <Range> ")")?> => Ty::U16(r.unwrap_or_default().cast()),
	"u32" <r:("(" <Range> ")")?> => Ty::U32(r.unwrap_or_default().cast()),

	"String" <r:("(" <Range> ")")?> => Ty::Str { len: r.unwrap_or_default().cast() },
	<ty:Ty> "[" <r:Range?> "]" => Ty::Arr { ty: Box::new(ty), len: r.unwrap_or_default().cast() },
	"{" "[" <key:Ty> "]:" <val:Ty> "}" => Ty::Map { key: Box::new(key), val: Box::new(val) },
	
	"{" <fields:Comma<(<Word> ":" <Ty>)>> "}" => Ty::Struct { fields },
	"(" <variants:Comma<(<Word>)>> ")" => Ty::Enum { variants },

	"Instance" <class:("(" <Word> ")")?> => Ty::Instance(false, class),

	"Vector3" => Ty::Vector3,

	<name:Word> => {
		ref_used.insert(name.clone());
		Ty::Ref(name)
	},

	<ty:Ty> "?" => match ty {
		Ty::Instance(_, class) => Ty::Instance(true, class),

		_ => Ty::Optional(Box::new(ty)),
	},
}

Range: Range<f64> = {
	".." => Range::default(),

	".." <max:Number> => Range::new(None, Some(max)),

	<min:Number> ".." => Range::new(Some(min), None),

	<num:Number> => Range::new(Some(num), Some(num)),
	<min:Number> ".." <max:Number> => Range::new(Some(min), Some(max)),
}

Comma<T>: Vec<T> = {
	<mut v:(<T> ",")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			v.push(e);
			v
		}
	}
}

Number: f64 = r"[-+]?[0-9]*\.?[0-9]+" => f64::from_str(<>).unwrap();
Word: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();
